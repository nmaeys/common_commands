  __  __  __  __  __  __  __  _  _     __  __  __  __  __  __   __   _  _  ___   ___ 
 / _)/  \(  \/  )(  \/  )/  \( \( )   / _)/  \(  \/  )(  \/  ) (  ) ( \( )(   \ / __)
( (_( () ))    (  )    (( () ))  (   ( (_( () ))    (  )    (  /__\  )  (  ) ) )\__ \
 \__)\__/(_/\/\_)(_/\/\_)\__/(_)\_)   \__)\__/(_/\/\_)(_/\/\_)(_)(_)(_)\_)(___/ (___/

=======================================================================================================================

OGR2OGR and SHP2PGSQL

creating shapefile from geodatabase file (.gdb) - (install ogr)
    ogr2ogr -f "ESRI Shapefile" path/to/shapefile path/to/gdb

    ^^^what is happening^^^
        ogr2ogr directs action to convert from one ogr file type to another (gdb to shp in this case)
        -f (select a driver) "ESRI Shapefile" (the driver you want to use for conversion)
        path/to/shapefile - new shapefile you will create ie; ny/ny_places/ny.shp
        path/to/gdb - file being converted ie; ny/ny_geodatabase/ny.gdb

        NOTE - this will output several files upon conversion - you need all the new files in same directory

converting shapefile to Postgres Table - need postgres (run these on floppy or set up postgres on your box)
    shp2pgsql -s 4269 path/to/shapefile schema.new_table | psql -d data_base
you can also use shp2pgsql to upload .dbf files to postgres
    the command line will just ignore the missing shp and shx and upload "attribute table"
    adding -a after the shp2pgsql will allow you to append to the specified table

    ^^^ what is happening ^^^
        
        shp2pgsql directs the action from shapefile into postgresSQL
        -s (set cordinate projection) 4269 (one of many coordinate projections)
        path/to/shapefile is the shapefile you are converting
        schema is the table schema and new_table is the new table you wish to create
        | pipe that action into the sql databse action
        -d data_base sets the target database destination

the above statement can be reversed from table to shapefile
    pgsql2shp -f file/destination -u username data_base table

geojson file to shp - ogr functionality (install ogr)
    ogr2ogr -nlt POINT -skipfailures points.shp geojson file.geojason OGRGeoJson

=======================================================================================================================

POSTGRESQL RELATED 

find stuff in a dir and upload it to postgres
    find ./*/od/ -name *wildcard.csv -exec psql -c "\copy table_name from '{}' header csv" -d database \;

change column name
    alter table tbl_1 rename column clmn_name to new_clmn_name;

check column type
    select column_name, data_type
    from information_schema.columns
    where table_name = 'table'
    order by ordinal_position;

change column type when "using" is required
    alter table tbl_1 alter column clmn_name type insert_type using(trim(clmn_name)::insert_type);

sum a field - vr example
    select zip,
    coalesce(count(case when party = 'D' then 1 end), 0) as D,
    coalesce(count(case when party = 'R' then 1 end), 0) as R,
    coalesce(count(case when party = 'O' then 1 end), 0) as O
    from ca_vr
    group by zip;

count points inside of polys
    select boundaries.gid, count(points.geom) as totale
    from boundaries left join points
    on st_contains(boundaries.geom,points.geom)
    group by boundaries.gid;

\?
    get some help in general

\h
   get help on sql queries  

move table from one db to another db
    pg_dump -t <table name> <source DB> | psql -d <target DB> 

copy a table from one db to another
    pg_dump -U postgres -t original_table original_db | psql target_db

populate target database from gdb file
    ogr2ogr --config PG_USE_COPY YES -skipfailures -f "PostgreSQL" PG:"host= port=5432 user=postgres dbname=
    password=" "./source.gdb/" "specify_layer"
    ***ogr2ogr move between two types of spatial data -t_srs override the CRS

check SRID 
    select st_srid(the_geom) from table;
        ***can limit output number if so desired: limit 1

change SRID
    alter table my_table
    alter column geom_column
    type Geometry(Point, target_srid)
    usint ST_Transform(geom_column, target_srid);

add spatial index to large tables for faster queries
    create index name_of_index on name_of_table using GIST(geom_column);

select most frequent value(s) in a column and get their counts
    select count(*), myvalue from table group by myvalue order by
    count(*) desc limit 1;
        ** can specify limit ie; top 100 with desc limit #

copy table from one psql database to another
    pg_dump -t table_to_copy source_db | psql target_db

find the size of all your postgres databases on disk 
    SELECT pg_database.datname,  
           pg_size_pretty(pg_database_size(pg_database.datname)) AS size  
      FROM pg_database;

remove points from a point table that fall outside of the polygon you are interested ing
    create table party_good_ca as select voter_id, wkb_geometry, party from goodaddr_vr_ca as p inner join geo_state as
    s on lower(p.state) = substring(s.shid from 18 for 2) where st_within(p.wkb_geometry,s.geom);

insert into a table from a csv file
    COPY table_name FROM '/path/to/csv/ZIP_CODES.txt' DELIMITER ',' CSV

=======================================================================================================================

(G)AWK & GSED

add a prefix to the first column in a csv file | replace all the " from that prefix insertion
    awk '{$1="CO"$1; print}'list2.csv | gsed -e 's/\"/''/g' > list3.csv

swap two columns around in a csv file
    awk -F, -v OFS=, '{tmp=$1;$1=$2;$2=tmp;print}' toy.csv > toy2.csv

replace character
    gsed -e 's/find_char/replace_char/g'

find uniqe values in a column of file get the number of times it occurs and pump it to a new file
    gawk -F ',' '{print $1}' ak_vh.csv | sort | uniq -c > uniqes.csv

insert header to file 
    gsed -i -e '1iHere is the new line text\' sample.csv

=======================================================================================================================

SCP

scp path/to/file host/path/to/file

scp host/path/to/file local/path/to/file

=======================================================================================================================
Regex

useful for all non asci
[^\x00-\x7F]

=======================================================================================================================

BASH Commands

list of open files greped for postgres (grep whatever)
f -P -i -n -sTCP:LISTEN | grep postgres
